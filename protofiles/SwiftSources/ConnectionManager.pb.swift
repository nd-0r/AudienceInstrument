// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ConnectionManager.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum MessageType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case network // = 0
  case measurement // = 1
  case messenger // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .network
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .network
    case 1: self = .measurement
    case 2: self = .messenger
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .network: return 0
    case .measurement: return 1
    case .messenger: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension MessageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [MessageType] = [
    .network,
    .measurement,
    .messenger,
  ]
}

#endif  // swift(>=4.2)

struct ForwardingEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var linkID: Int64 = 0

  var cost: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NetworkMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var distanceVector: Dictionary<Int64,ForwardingEntry> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MeasurementMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNumber: UInt32 = 0

  var initiatingPeerID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MessengerMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: Int64 = 0

  var to: Int64 = 0

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MessageWrapper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: MessageType = .network

  var data: MessageWrapper.OneOf_Data? = nil

  var networkMessage: NetworkMessage {
    get {
      if case .networkMessage(let v)? = data {return v}
      return NetworkMessage()
    }
    set {data = .networkMessage(newValue)}
  }

  var measurementMessage: MeasurementMessage {
    get {
      if case .measurementMessage(let v)? = data {return v}
      return MeasurementMessage()
    }
    set {data = .measurementMessage(newValue)}
  }

  /// more later?
  var messengerMessage: MessengerMessage {
    get {
      if case .messengerMessage(let v)? = data {return v}
      return MessengerMessage()
    }
    set {data = .messengerMessage(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    case networkMessage(NetworkMessage)
    case measurementMessage(MeasurementMessage)
    /// more later?
    case messengerMessage(MessengerMessage)

  #if !swift(>=4.1)
    static func ==(lhs: MessageWrapper.OneOf_Data, rhs: MessageWrapper.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.networkMessage, .networkMessage): return {
        guard case .networkMessage(let l) = lhs, case .networkMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.measurementMessage, .measurementMessage): return {
        guard case .measurementMessage(let l) = lhs, case .measurementMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.messengerMessage, .messengerMessage): return {
        guard case .messengerMessage(let l) = lhs, case .messengerMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension MessageType: @unchecked Sendable {}
extension ForwardingEntry: @unchecked Sendable {}
extension NetworkMessage: @unchecked Sendable {}
extension MeasurementMessage: @unchecked Sendable {}
extension MessengerMessage: @unchecked Sendable {}
extension MessageWrapper: @unchecked Sendable {}
extension MessageWrapper.OneOf_Data: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MessageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MESSAGETYPE_NETWORK"),
    1: .same(proto: "MESSAGETYPE_MEASUREMENT"),
    2: .same(proto: "MESSAGETYPE_MESSENGER"),
  ]
}

extension ForwardingEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ForwardingEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "linkID"),
    2: .same(proto: "cost"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.linkID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.cost) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.linkID != 0 {
      try visitor.visitSingularInt64Field(value: self.linkID, fieldNumber: 1)
    }
    if self.cost != 0 {
      try visitor.visitSingularUInt64Field(value: self.cost, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ForwardingEntry, rhs: ForwardingEntry) -> Bool {
    if lhs.linkID != rhs.linkID {return false}
    if lhs.cost != rhs.cost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NetworkMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NetworkMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "distanceVector"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,ForwardingEntry>.self, value: &self.distanceVector) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.distanceVector.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,ForwardingEntry>.self, value: self.distanceVector, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NetworkMessage, rhs: NetworkMessage) -> Bool {
    if lhs.distanceVector != rhs.distanceVector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MeasurementMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MeasurementMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequenceNumber"),
    2: .same(proto: "initiatingPeerId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.sequenceNumber) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.initiatingPeerID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNumber != 0 {
      try visitor.visitSingularUInt32Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    if self.initiatingPeerID != 0 {
      try visitor.visitSingularInt64Field(value: self.initiatingPeerID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MeasurementMessage, rhs: MeasurementMessage) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.initiatingPeerID != rhs.initiatingPeerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessengerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessengerMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.from) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.to) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.from != 0 {
      try visitor.visitSingularInt64Field(value: self.from, fieldNumber: 1)
    }
    if self.to != 0 {
      try visitor.visitSingularInt64Field(value: self.to, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessengerMessage, rhs: MessengerMessage) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessageWrapper"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "networkMessage"),
    3: .same(proto: "measurementMessage"),
    4: .same(proto: "messengerMessage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try {
        var v: NetworkMessage?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .networkMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .networkMessage(v)
        }
      }()
      case 3: try {
        var v: MeasurementMessage?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .measurementMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .measurementMessage(v)
        }
      }()
      case 4: try {
        var v: MessengerMessage?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .messengerMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .messengerMessage(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .network {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    switch self.data {
    case .networkMessage?: try {
      guard case .networkMessage(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .measurementMessage?: try {
      guard case .measurementMessage(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .messengerMessage?: try {
      guard case .messengerMessage(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageWrapper, rhs: MessageWrapper) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
