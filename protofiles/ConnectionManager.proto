syntax = "proto3";

// MARK: Routing

message ForwardingEntry {
   uint64 linkID = 1;
   uint64 cost = 2;
}

message NetworkMessage {
   map<uint64, ForwardingEntry> distanceVector = 1;
}

// MARK: Measurement

message MeasurementMessage {
   uint32 sequenceNumber = 1;
   uint64 initiatingPeerId = 2;
   uint64 toPeer = 3;
   uint64 delayInNS = 4;
}

// MARK: Messenger

message MessengerMessage {
   uint64 from = 1;
   uint64 to = 2;
   string message = 3;
}

// MARK: Distance protocol

message Init {
   uint32 freq = 1;
}

message InitAck { }

message Speak {
   uint64 from = 1;
}

message Spoke {
   uint64 from = 1;
   uint64 delayInNS = 2;
}

message Done {
   float distanceInM = 1;
}

message DistanceProtocolWrapper {
   oneof type {
      Init init = 2;
      InitAck initAck = 3;
      Speak speak = 4;
      Spoke spoke = 5;
      Done done = 6;
   }
}

/////////////////////////////////////////////////////

message MessageWrapper {
   oneof data {
      NetworkMessage networkMessage = 2;
      NeighborAppMessage neighborAppMessage = 3;
      MeshAppMessage meshAppMessage = 4;
   }
}

message NeighborAppMessage {
   oneof data {
      DistanceProtocolWrapper distanceProtocolMessage = 3;
      // more (or fewer:) later?
   }
}

message MeshAppMessage {
   oneof data {
      MessengerMessage messengerMessage = 1;
   }
}

